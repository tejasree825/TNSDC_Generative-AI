import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models, datasets, utils
(train_images_lr,_),(test_images_lr) = datasets.cifar10.load_data()
train_images_lr = train_images_lr.astype('float32')/255.0
(_,test_images_lr)=datasets.cifar10.load_data()
def upscale_image(image):
  return tf.image.resize(image,[image.shape[0]*4 ,image.shape[1]*4],method='bicubic')
train_images_hr = np.array([upscale_image(img) for img in train_images_lr])
test_images_hr = np.array([upscale_image(img) for img in test_images_lr])
def build_srcnn_model():
  model = models.sequential([
      layers.conv2D(64,(9,9), activation='relu',padding='same',input_shape=(32,32,3)),
      layers.conv2D(32,(1,1), activation='relu',padding='same'),
      layers.conv2D(3,(5,5), activation='linear',padding='same')
  ])
  return model
model = build_srcnn_model()
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(train_images_lr,train_images_hr,validation_data=(test_images_lr,test_images_hr),epochs=10,batch_size=32)
evaluation = model.evaluate(test_images_lr, test_images_hr)
print("evaluation loss:",evaluation)
predictions = model.predict(test_images_lr)
import matplotlib.pyplot as plt
plt.figure(figsize=(10,5))
for i in range(5):
  plt.subplot(2,5,i + 1)
  plt.imshow(test_images_lr[i])
  plt.title("low-res image")
  plt.axis('off')

  plt.subplot(2,5,i + 6)
  plt.imshow(predictions[i])
  plt.title("super-res image")
  plt.axis('off')
plt.show()

